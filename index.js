require("dotenv").config();
const { Telegraf, Extra } = require("telegraf");
const util = require("util");
const { search } = require("./helpers/api");
const axios = require("axios");
const {
  city_id,
  city_name,
  al_id,
  al_name,
  as_id,
  as_name,
  season_id,
  season_name,
  standard_id,
} = require("./helpers/const");
const {
  start,
  cancel_btn,
  main_menu,
  municipal_area,
  city_area,
  al_area,
  as_area,
  num_benefit,
  num_season,
  post_btn,
} = require("./helpers/keyboards");
const {
  cancel_caption,
  info,
  use_subsidy,
  select_municipal_or_city,
  select_municipal,
  select_city,
  select_people,
  select_work,
  select_old,
  select_kid,
  select_salary,
  select_jkh,
  select_electric,
  select_benefit,
  select_benefit_size,
  select_season,
  select_standard,
  nasel_punct,
  pls_wait,
} = require("./helpers/msg");
const { state, subsidy } = require("./helpers/utils");
const { TELEGRAM_BOT_TOKEN } = process.env;
const bot = new Telegraf(process.env.BOT_TOKEN);
let oktomo_code = {};
let selected_city = {};
let selected_al = {};
let selected_as = {};
let selected_people = {};
let selected_work = {};
let selected_old = {};
let selected_kid = {};
let selected_salary = {};
let selected_jkh = {};
let selected_electric = {};
let selected_benefit = {};
let selected_season = {};
let selected_standard = {};
let step = {};

bot.start((ctx) => {
  selected_city[ctx.chat.id] = null;
  selected_al[ctx.chat.id] = null;
  selected_as[ctx.chat.id] = null;
  selected_people[ctx.chat.id] = null;
  selected_work[ctx.chat.id] = null;
  selected_old[ctx.chat.id] = null;
  selected_kid[ctx.chat.id] = null;
  selected_salary[ctx.chat.id] = null;
  selected_jkh[ctx.chat.id] = null;
  selected_electric[ctx.chat.id] = null;
  selected_benefit[ctx.chat.id] = null;
  selected_season[ctx.chat.id] = null;
  selected_standard[ctx.chat.id] = null;
  step[ctx.chat.id] = null;
  ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${ctx.chat.first_name}! üôÇ`);
  ctx.reply(use_subsidy, start);
});

bot.hears("–í –Ω–∞—á–∞–ª–æ", (ctx) => {
  selected_city[ctx.chat.id] = null;
  selected_al[ctx.chat.id] = null;
  selected_as[ctx.chat.id] = null;
  selected_people[ctx.chat.id] = null;
  selected_work[ctx.chat.id] = null;
  selected_old[ctx.chat.id] = null;
  selected_kid[ctx.chat.id] = null;
  selected_salary[ctx.chat.id] = null;
  selected_jkh[ctx.chat.id] = null;
  selected_electric[ctx.chat.id] = null;
  selected_benefit[ctx.chat.id] = null;
  selected_season[ctx.chat.id] = null;
  selected_standard[ctx.chat.id] = null;
  step[ctx.chat.id] = null;
  ctx.reply(cancel_caption, start);
});

bot.hears("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", (ctx) => {
  ctx.reply(select_municipal_or_city, main_menu);
});

bot.hears("–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω", (ctx) => {
  ctx.reply(select_municipal, municipal_area);
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ '–ê–ª—Ç–∞–π—Å–∫–∏–π'
bot.action("al", async (ctx) => {
  ctx.deleteMessage();
  ctx.reply(nasel_punct, al_area);
});

Object.keys(al_id).forEach((al) => {
  bot.action(al, async (ctx) => {
    ctx.deleteMessage();
    selected_al[ctx.chat.id] = al_id[al];
    oktomo_code = selected_al[ctx.chat.id];
    if (isNaN(selected_al[ctx.chat.id]) === true) {
      ctx.reply("–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç", {
        parse_mode: "html",
      });
    } else {
      await ctx.reply(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: ${al_name[al]}`,
        cancel_btn
      );
      // await ctx.reply("–ù–∞–∂–º–∏—Ç–µ üëá", next_people_btn);
      await ctx.reply(select_people);
      console.log("–ù–∞—Å–µ–ª.–ø—É–Ω–∫—Ç: ", selected_al);
      step[ctx.chat.id] = 1;
    }
  });
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ '–ê—Å–∫–∏–∑—Å–∫–∏–π'
bot.action("as", (ctx) => {
  ctx.deleteMessage();
  ctx.reply(nasel_punct, as_area);
});

Object.keys(as_id).forEach((as) => {
  bot.action(as, async (ctx) => {
    selected_as[ctx.chat.id] = as_id[as];
    oktomo_code = selected_as[ctx.chat.id];
    console.log("–æ–∫—Ç–æ–º–æ: ", oktomo_code);
    if (isNaN(selected_as[ctx.chat.id]) === true) {
      ctx.reply("–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥", {
        parse_mode: "html",
      });
    } else {
      ctx.deleteMessage();
      await ctx.reply(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: ${as_name[as]}`,
        cancel_btn
      );
      await ctx.reply(select_people);
      console.log("–ù–∞—Å–µ–ª –ø—É–Ω–∫—Ç: ", selected_as);
      step[ctx.chat.id] = 1;
    }
  });
});

bot.hears("–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥", (ctx) => {
  ctx.reply(select_city, city_area);
});

Object.keys(city_id).forEach((city) => {
  bot.action(city, async (ctx) => {
    selected_city[ctx.chat.id] = city_id[city];
    oktomo_code = selected_city[ctx.chat.id];
    if (isNaN(selected_city[ctx.chat.id]) === true) {
      ctx.reply("–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥", {
        parse_mode: "html",
      });
    } else {
      ctx.deleteMessage();
      await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: ${city_name[city]}`, cancel_btn);
      await ctx.reply(select_people);
      console.log("–≥–æ—Ä–æ–¥: ", selected_city);
      step[ctx.chat.id] = 1;
    }
  });
});

bot.hears("–î–∞", (ctx) => {
  ctx.deleteMessage();
  ctx.reply(select_benefit_size, cancel_btn);
  step[ctx.chat.id] = 8;
});

bot.hears("–ù–µ—Ç", async (ctx) => {
  selected_benefit[ctx.chat.id] = 0;
  console.log("–ª—å–≥–æ—Ç–∞: ", selected_benefit);
  await ctx.reply(select_season, cancel_btn);
  await ctx.reply("–ù–∞–∂–º–∏—Ç–µ üëá", num_season);
});

bot.on("text", (ctx) => {
  if (step[ctx.chat.id] === 1) {
    selected_people[ctx.chat.id] = parseInt(ctx.message.text);
    if (
      isNaN(selected_people[ctx.chat.id]) === true ||
      selected_people[ctx.chat.id] <= 0
    ) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <b>—Ü–∏—Ñ—Ä–æ–π</b> –±–æ–ª—å—à–µ –Ω—É–ª—è:", {
        parse_mode: "html",
      });
      return (step[ctx.chat.id] = 1);
    } else {
      console.log("–ª—é–¥–∏:", selected_people);
      ctx.reply(select_work);
      step[ctx.chat.id] = 2;
    }
  } else if (step[ctx.chat.id] === 2) {
    selected_work[ctx.chat.id] = parseInt(ctx.message.text);
    if (
      isNaN(selected_work[ctx.chat.id]) === true ||
      selected_work[ctx.chat.id] < 0
    ) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ <b>—á–∏—Å–ª–æ</b>:", {
        parse_mode: "html",
      });
      step[ctx.chat.id] = 2;
    } else {
      console.log("—Ä–∞–±–æ—Ç—è–≥–∏:", selected_work);
      step[ctx.chat.id] = state(
        selected_people[ctx.chat.id],
        selected_work[ctx.chat.id],
        0,
        0,
        ctx,
        step[ctx.chat.id],
        select_salary,
        select_old,
        3,
        2
      );
    }
  } else if (step[ctx.chat.id] === 3) {
    selected_old[ctx.chat.id] = parseInt(ctx.message.text);
    if (
      isNaN(selected_old[ctx.chat.id]) === true ||
      selected_old[ctx.chat.id] < 0
    ) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ <b>—á–∏—Å–ª–æ</b>:", {
        parse_mode: "html",
      });
      step[ctx.chat.id] = 3;
    } else {
      console.log("—Å—Ç–∞—Ä–∏–∫–∏:", selected_old);
      step[ctx.chat.id] = state(
        selected_people[ctx.chat.id],
        selected_work[ctx.chat.id],
        selected_old[ctx.chat.id],
        0,
        ctx,
        step[ctx.chat.id],
        select_salary,
        select_kid,
        4,
        3
      );
    }
  } else if (step[ctx.chat.id] === 4) {
    selected_kid[ctx.chat.id] = parseInt(ctx.message.text);
    if (
      isNaN(selected_kid[ctx.chat.id]) === true ||
      selected_kid[ctx.chat.id] < 0
    ) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ <b>—á–∏—Å–ª–æ</b>:", {
        parse_mode: "html",
      });
      step[ctx.chat.id] = 4;
    } else {
      console.log("–¥–µ—Ç–∏:", selected_old);
      step[ctx.chat.id] = state(
        selected_people[ctx.chat.id],
        selected_work[ctx.chat.id],
        selected_old[ctx.chat.id],
        selected_kid[ctx.chat.id],
        ctx,
        step[ctx.chat.id],
        select_salary,
        select_salary,
        5,
        4
      );
    }
  } else if (step[ctx.chat.id] === 5) {
    selected_salary[ctx.chat.id] = parseInt(ctx.message.text);
    if (
      isNaN(selected_salary[ctx.chat.id]) === true ||
      selected_salary[ctx.chat.id] <= 0
    ) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <b>—Ü–∏—Ñ—Ä–æ–π</b> –±–æ–ª—å—à–µ –Ω—É–ª—è:", {
        parse_mode: "html",
      });
      step[ctx.chat.id] = 5;
    } else {
      console.log("–∑–ø:", selected_salary);
      ctx.reply(select_jkh);
      step[ctx.chat.id] = 6;
    }
  } else if (step[ctx.chat.id] === 6) {
    selected_jkh[ctx.chat.id] = parseInt(ctx.message.text);
    if (
      isNaN(selected_jkh[ctx.chat.id]) === true ||
      selected_jkh[ctx.chat.id] <= 0
    ) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <b>—Ü–∏—Ñ—Ä–æ–π</b> –±–æ–ª—å—à–µ –Ω—É–ª—è:", {
        parse_mode: "html",
      });
      step[ctx.chat.id] = 6;
    } else {
      console.log("–∂–∫—Ö:", selected_jkh);
      ctx.reply(select_electric);
      step[ctx.chat.id] = 7;
    }
  } else if (step[ctx.chat.id] === 7) {
    selected_electric[ctx.chat.id] = parseInt(ctx.message.text);
    if (
      isNaN(selected_electric[ctx.chat.id]) === true ||
      selected_electric[ctx.chat.id] <= 0
    ) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <b>—Ü–∏—Ñ—Ä–æ–π</b> –±–æ–ª—å—à–µ –Ω—É–ª—è:", {
        parse_mode: "html",
      });
      step[ctx.chat.id] = 7;
    } else {
      console.log("—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ':", selected_electric);
      ctx.reply(select_benefit, num_benefit); // –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤—É –≤–æ—Ç –∑–¥–µ—Å—å
    }
  } else if (step[ctx.chat.id] === 8) {
    selected_benefit[ctx.chat.id] = parseInt(ctx.message.text);
    if (
      isNaN(selected_benefit[ctx.chat.id]) === true ||
      selected_benefit[ctx.chat.id] <= 0
    ) {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <b>—Ü–∏—Ñ—Ä–æ–π</b> –±–æ–ª—å—à–µ –Ω—É–ª—è:", {
        parse_mode: "html",
      });
      step[ctx.chat.id] = 8;
    } else {
      console.log("—Ä–∞–∑–º–µ—Ä –ª—å–≥–æ—Ç—ã:", selected_benefit);
      ctx.reply(select_season, num_season);
    }
  }
});

// –∑–∞–ø–æ–º–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ '–ü–µ—Ä–∏–æ–¥'
Object.keys(season_id).forEach((season) => {
  bot.action(season, async (ctx) => {
    ctx.deleteMessage();
    if (oktomo_code === null) {
      await ctx.reply(cancel_caption);
    } else {
      selected_season[ctx.chat.id] = season_id[season];
      await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–∏–æ–¥: ${season_name[season]}`, cancel_btn);
      await ctx.reply(pls_wait, { parse_mode: "HTML" });
      console.log(selected_season);

      if (selected_people[ctx.chat.id] > 5) {
        selected_people[ctx.chat.id] = 5;
      }
      let arr_length = {};
      let num = [];
      let arr_data = [];
      let arr_btn = [];
      let split_arr = [];
      let chunk_arr = [];
      const data = await search(
        oktomo_code,
        selected_people[ctx.chat.id],
        selected_season[ctx.chat.id]
      );
      num = data.rates;
      arr_length = num.length;
      for (var i = 0; i < arr_length; i++) {
        arr_data[i] = data.rates[i];
        split_arr[i] = arr_data[i].diffCriteria.split(" ");
        chunk_arr[i] = split_arr[i].slice(4);
        arr_btn[i] = chunk_arr[i].join(" ");
      }
      await ctx.reply(select_standard, {
        // —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤—É —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏
        reply_markup: JSON.stringify({
          inline_keyboard: arr_btn.map((x, xi) => [
            {
              text: x,
              callback_data: String(xi),
            },
          ]),
        }),
      });
    }
  });
});

// –∑–∞–ø–æ–º–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
Object.keys(standard_id).forEach((standard) => {
  bot.action(standard, async (ctx) => {
    ctx.deleteMessage();
    if (oktomo_code === null) {
      ctx.reply(cancel_caption);
    } else {
      selected_standard[ctx.chat.id] = standard_id[standard];
      await ctx.reply("–ù–∞–∂–º–∏—Ç–µ üëá", post_btn);
      console.log(selected_standard);
    }
  });
});

bot.action("post", async (ctx) => {
  ctx.deleteMessage();
  if (oktomo_code === null) {
    ctx.reply(cancel_caption);
  } else {
    const data = await search(
      oktomo_code,
      selected_people[ctx.chat.id],
      selected_season[ctx.chat.id]
    );
    get_data = data.rates[selected_standard[ctx.chat.id]];
    let Dmax = {};
    let S = {};

    rs = get_data.value * selected_people[ctx.chat.id]; // –†–µ–≥–∏–æ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç
    sd = selected_salary[ctx.chat.id] / 6; // —Å–æ–≤–æ–æ–∫—É–ø–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–µ–º—å–∏
    pm = // –ø—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º
      selected_work[ctx.chat.id] * 13026 +
      selected_old[ctx.chat.id] * 10277 +
      selected_kid[ctx.chat.id] * 11592;
    pm_sr = pm / selected_people[ctx.chat.id];
    jkh = // –∂–∫—Ö —Å—É–º–º–∞
      selected_jkh[ctx.chat.id] +
      selected_electric[ctx.chat.id] -
      selected_benefit[ctx.chat.id];

    if (sd > pm) {
      Dmax = 0.22 * sd;
      subsidy(S, rs, Dmax, jkh, ctx, info);
    } else if (sd < pm) {
      Dmax = (sd / pm_sr) * 0.1 * sd;
      subsidy(S, rs, Dmax, jkh, ctx, info);
    }

    console.log("–ö—Ä–∏—Ç–µ—Ä–∏–π: ", get_data.diffCriteria);
    console.log("–†–µ–≥–∏–æ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç: ", rs);
    console.log("–°–æ–≤–æ–∫—É–ø–Ω—ã–π –¥–æ—Ö–æ–¥:", sd);
    console.log("–ü—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º:", pm);
    console.log("–ü—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º —Å—Ä–µ–¥–Ω–∏–π:", pm_sr);
    console.log("–ñ–ö–•:", jkh);
    console.log("–îmax", Dmax);
    console.log("–°—É–±—Å–∏–¥–∏—è", S);
  }
});

bot.launch();
